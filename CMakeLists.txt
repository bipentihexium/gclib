cmake_minimum_required(VERSION 3.30)

project(GCLibrary VERSION 0.1.0.0 LANGUAGES CXX)

option(GCLIB_MARCH_NATIVE "use -march=native for C++ if supported by the compiler" OFF)
option(GCLIB_NO_EXCEPTIONS "use -fno-exceptions for C++ if supported by the compiler" OFF)
option(GCLIB_BUILD_TESTS "build tests" OFF)

# --------------------------------- HELPER FUNCS -----------------------------
include(CheckCXXCompilerFlag)
function(UseSupportedCompilerFlags TARGET PRINT)
	foreach(flag IN LISTS ARGN)
		CHECK_CXX_COMPILER_FLAG("${flag}" supported)
		if (supported)
			target_compile_options(${TARGET} PUBLIC "${flag}")
		elseif(PRINT)
			message(STATUS "${flag} is not supported by the C++ compiler")
		endif()
	endforeach()
endfunction()

# --------------------------------- DEPENDENCIES ------------------------------
find_package(Catch2 3 REQUIRED)

# --------------------------------- ADD EXECUTABLES ------------------------------
add_library(gclib ./src/gc.cpp ./src/block.cpp)
target_include_directories(gclib PUBLIC ${CMAKE_SOURCE_DIR}/include/)
if(GCLIB_BUILD_TESTS)
	add_executable(gclib-tests ./test/test.cpp ./test/poly.cpp ./test/tu.cpp)
	target_link_libraries(gclib-tests PRIVATE gclib Catch2::Catch2WithMain)
endif()
# --------------------------------- OPTIONAL FLAGS -----------------------------
if(GCLIB_MARCH_NATIVE)
	UseSupportedCompilerFlags(gclib ON "-march=native")
endif()
if(GCLIB_NO_EXCEPTIONS)
	UseSupportedCompilerFlags(gclib ON "-fno-exceptions")
endif()

# ---------------- C++ standard + ENABLE WARNINGS + ASAN ------------------------------
target_compile_features(gclib PUBLIC cxx_std_20)
if(GCLIB_BUILD_TESTS)
	target_compile_features(gclib-tests PUBLIC cxx_std_20)
endif()
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	target_compile_options(gclib PUBLIC -Wall -Wextra -Wpedantic -Wno-class-memaccess)
	target_compile_options(gclip PRIVATE -fdiagnostics-color=always)
	if(GCLIB_BUILD_TESTS)
		target_compile_options(gclib-tests PUBLIC -Wall -Wextra -Wpedantic -Wno-class-memaccess)
		target_compile_options(gclib-tests PRIVATE -fdiagnostics-color=always)
	endif()
endif()
if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	set(WARN_OPTS -Weverything -Wno-c++98-compat-pedantic -Wno-sign-conversion -Wno-old-style-cast -Wno-unsafe-buffer-usage -Wno-padded)
	target_compile_options(gclib PUBLIC ${WARN_OPTS})
	target_compile_options(gclib PRIVATE -fcolor-diagnostics)
	if(GCLIB_BUILD_TESTS)
		target_compile_options(gclib-tests PUBLIC ${WARN_OPTS})
		target_compile_options(gclib-tests PRIVATE -fcolor-diagnostics)
	endif()
endif()
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	set(GCLIB_SANITIZE -fsanitize=address,return,alignment,enum)
	target_compile_options(gclib PRIVATE $<$<CONFIG:Debug>:${GCLIB_SANITIZE}>)
	target_link_options(gclib PRIVATE $<$<CONFIG:Debug>:${GCLIB_SANITIZE}>)
	if(GCLIB_BUILD_TESTS)
		target_compile_options(gclib-tests PRIVATE ${GCLIB_SANITIZE} -O1)
		target_link_options(gclib-tests PRIVATE ${GCLIB_SANITIZE})
	endif()
endif()

if(GCLIB_BUILD_TESTS)
	message(STATUS "build tests is enabled")
	include(CTest)
	include(Catch)
	catch_discover_tests(gclib-tests)
endif()

message(STATUS "configured gclib, build type is [${CMAKE_BUILD_TYPE}]")

